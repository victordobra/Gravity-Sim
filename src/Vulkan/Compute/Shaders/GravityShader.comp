#version 430

// Constants
const double MIN_DISTANCE = 0.3;

// Point struct
struct Point {
	dvec2 pos;
	dvec2 vel;
	double mass;
};

// Point buffer input
layout(set = 0, binding = 0) buffer PointInBuffer {
	Point pointsIn[];
};
layout(set = 1, binding = 0) buffer PointOutBuffer {
	Point pointsOut[];
};

// Push constants
layout(push_constant) uniform PushConstants {
	double deltaTime;
	double gravConst;
	uint pointCount;
} push;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main() {
	// Get the point's index
	uint pointIndex = gl_GlobalInvocationID.x;

	// Get the point's data
	Point point1 = pointsIn[pointIndex];

	// Loop through every point
	for(uint i = 0; i != push.pointCount; ++i) {
		// Skip the current point if it is the target point
		if(i == pointIndex)
			continue;
		
		// Get the second point's data
		Point point2 = pointsIn[i];

		// Get the distance between the two points
		dvec2 pointDistance = point2.pos - point1.pos;

		// Skip the current point if the distance is too small
		if(dot(pointDistance, pointDistance) < MIN_DISTANCE * MIN_DISTANCE)
			continue;

		// Calculate the current point's acceleration
		dvec2 acceleration = normalize(pointDistance) * (push.deltaTime * push.gravConst * point2.mass / dot(pointDistance, pointDistance));

		// Apply the acceleration to the first point
		point1.vel += acceleration;
	}

	// Write the point's new data to the points out array
	pointsOut[pointIndex] = point1;
}