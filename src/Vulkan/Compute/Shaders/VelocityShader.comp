#version 430

// Point struct
struct Point {
	vec2 pos;
	vec2 vel;
	float mass;
};

// Point buffer input
layout(set = 0, binding = 0) buffer PointInBuffer {
	Point pointsIn[];
};
layout(set = 1, binding = 0) buffer PointOutBuffer {
	Point pointsOut[];
};
layout(set = 1, binding = 1, rg32f) uniform readonly image2D velocityImage;

// Push constants
layout(push_constant) uniform PushConstants {
	float deltaTime;
	float gravConst;
	uint pointCount;
} push;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main() {
	// Get the point's index
	uint pointIndex = gl_GlobalInvocationID.x;

	// Get the point's total velocity change
	vec2 velChange = vec2(0.0);
	for(uint i = 0; i != push.pointCount; ++i) {
		// Read the current interaction's velocity
		vec2 velocity = imageLoad(velocityImage, ivec2(pointIndex, i)).xy;

		// Add the current velocity to the total velocity change
		velChange += velocity;
	}

	// Set the point's new velocity
	pointsOut[pointIndex].vel = pointsIn[pointIndex].vel + velChange;

	// Apply the velocity to the current point
	pointsOut[pointIndex].pos = pointsIn[pointIndex].pos + pointsOut[pointIndex].vel * push.deltaTime;
}