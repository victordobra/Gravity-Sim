#version 440

// Constants
layout(constant_id = 0) const uint WORKGROUP_SIZE = 64;
layout(constant_id = 1) const float SIMULATION_TIME = 0.001;
layout(constant_id = 2) const float GRAVITATIONAL_CONST = 1;
layout(constant_id = 3) const float SOFTENING_LEN_SQR = 0.01;
layout(constant_id = 4) const uint PARTICLE_COUNT = 0;

// Particle buffers
layout(set = 0, binding = 0) buffer ParticlesPosInBuffer {
	vec2 particlesPosIn[];
};
layout(set = 0, binding = 1) buffer ParticlesVelInBuffer {
	vec2 particlesVelIn[];
};
layout(set = 0, binding = 2) buffer ParticlesMassInBuffer {
	float particlesMassIn[];
};

layout(set = 1, binding = 0) buffer ParticlesPosOutBuffer {
	vec2 particlesPosOut[];
};
layout(set = 1, binding = 1) buffer ParticlesVelOutBuffer {
	vec2 particlesVelOut[];
};
layout(set = 1, binding = 2) buffer ParticlesMassOutBuffer {
	float particlesMassOut[];
};

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

// Shared particle buffer
shared vec2 sharedParticlesPos[WORKGROUP_SIZE];
shared float sharedParticlesMass[WORKGROUP_SIZE];

void main() {
	// Load the current particle's info
	vec2 particlePos = particlesPosIn[gl_GlobalInvocationID.x];
	vec2 particleVel = particlesVelIn[gl_GlobalInvocationID.x];
	vec2 accel = vec2(0);

	for(uint i = 0; i != PARTICLE_COUNT; i += gl_WorkGroupSize.x) {
		// Load the corresponding particle into the shared buffer
		sharedParticlesPos[gl_LocalInvocationID.x] = particlesPosIn[i + gl_LocalInvocationID.x];
		sharedParticlesMass[gl_LocalInvocationID.x] = particlesMassIn[i + gl_LocalInvocationID.x];

		// Wait for all threads to load
		barrier();
		memoryBarrierShared();

		// Calculate all interactions for the current particle
		for(uint j = 0; j != gl_WorkGroupSize.x; ++j) {
			// Calculate the distance between the two particles
			vec2 distVec = sharedParticlesPos[j] - particlePos;
			float dist = inversesqrt(dot(distVec, distVec) + SOFTENING_LEN_SQR);

			// Apply the formula to get the current acceleration and add it to the particle's total acceleration
			accel += distVec * (sharedParticlesMass[j] * dist * dist * dist);
		}

		// Wait for all threads to finish
		barrier();
		memoryBarrierShared();
	}

	// Set the new particle's velocity and position
	vec2 newVel = particleVel + accel * (SIMULATION_TIME * GRAVITATIONAL_CONST);
	vec2 newPos = particlePos + (particleVel + newVel) * 0.5 * SIMULATION_TIME;

	// Update the output particle's info
	particlesPosOut[gl_GlobalInvocationID.x] = newPos;
	particlesVelOut[gl_GlobalInvocationID.x] = newVel;
}