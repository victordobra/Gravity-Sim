#version 440

#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_vote : require

// Constants
layout(constant_id = 0) const uint WORKGROUP_SIZE_BOX = 128;
layout(constant_id = 1) const uint WORKGROUP_SIZE_TREE = 64;
layout(constant_id = 2) const uint WORKGROUP_SIZE_FORCE = 32;

layout(constant_id = 3) const float SIMULATION_TIME = 0.001;
layout(constant_id = 4) const float GRAVITATIONAL_CONST = 1;
layout(constant_id = 5) const float SOFTENING_LEN_SQR = 0.01;
layout(constant_id = 6) const float ACCURACY_PARAMETER_SQR = 1.0;

layout(constant_id = 7) const uint PARTICLE_COUNT = 0;
layout(constant_id = 8) const uint TREE_SIZE = 0;

const uint STRIDE = WORKGROUP_SIZE_BOX * WORKGROUP_SIZE_BOX;

// Particle buffers
layout(set = 0, binding = 0) coherent buffer ParticlesPosInBuffer {
	vec2 particlesPosIn[];
};
layout(set = 0, binding = 1) coherent buffer ParticlesVelInBuffer {
	vec2 particlesVelIn[];
};
layout(set = 0, binding = 2) coherent buffer ParticlesMassInBuffer {
	float particlesMassIn[];
};

layout(set = 1, binding = 0) coherent buffer ParticlesPosOutBuffer {
	vec2 particlesPosOut[];
};
layout(set = 1, binding = 1) coherent buffer ParticlesVelOutBuffer {
	vec2 particlesVelOut[];
};
layout(set = 1, binding = 2) coherent buffer ParticlesMassOutBuffer {
	float particlesMassOut[];
};

// Simulation buffers
layout(set = 2, binding = 0) coherent buffer StateBuffer {
	vec4 box;
	vec4 boxes[WORKGROUP_SIZE_BOX];
} state;
layout(set = 2, binding = 1) coherent buffer CountBuffer {
	uint counts[];
};
layout(set = 2, binding = 2) coherent buffer RadiusBuffer {
	float radiuses[];
};
layout(set = 2, binding = 3) coherent buffer NodePosBuffer {
	vec2 nodePos[];
};
layout(set = 2, binding = 4) coherent buffer NodeMassBuffer {
	float nodeMass[];
};
layout(set = 2, binding = 5) coherent buffer SrcBuffer {
	uint sortedSrc[];
};
layout(set = 2, binding = 6) coherent buffer TreeCountBuffer {
	uvec2 counts[];
} treeCounts[10];
layout(set = 2, binding = 7) coherent buffer TreeStartBuffer {
	uvec2 starts[];
} treeStarts[10];
layout(set = 2, binding = 8) coherent buffer TreePosBuffer {
	vec2 pos[];
} treePos[10];
layout(set = 2, binding = 9) coherent buffer TreeMassBuffer {
	float mass[];
} treeMass[10];

layout(local_size_x_id = 2, local_size_y = 1, local_size_z = 1) in;

// Shared buffers
shared uint sharedCounts[WORKGROUP_SIZE_FORCE];
shared float sharedRadiuses[WORKGROUP_SIZE_FORCE];
shared vec2 sharedPos[WORKGROUP_SIZE_FORCE];
shared float sharedMass[WORKGROUP_SIZE_FORCE];

void main() {
	// Load the particle's info
	uint srcIndex = sortedSrc[gl_GlobalInvocationID.x];

	vec2 pos = particlesPosIn[srcIndex];
	vec2 vel = particlesVelIn[srcIndex];
	float mass = particlesMassIn[srcIndex];
	vec2 accel = vec2(0);

	// Load the first interval's info
	sharedCounts[gl_LocalInvocationID.x] = counts[gl_LocalInvocationID.x];
	sharedRadiuses[gl_LocalInvocationID.x] = radiuses[gl_LocalInvocationID.x];
	sharedPos[gl_LocalInvocationID.x] = nodePos[gl_LocalInvocationID.x];
	sharedMass[gl_LocalInvocationID.x] = nodeMass[gl_LocalInvocationID.x];

	subgroupBarrier();
	subgroupMemoryBarrierShared();

	// Save the interval start and end and tree size
	uint intStart = 0, ind = 0;
	uint treeSize = sharedCounts[0];

	subgroupBarrier();

	// Traverse the tree
	while(ind < treeSize) {
		// Check if a new interval needs to be loaded
		if(subgroupAll(ind - intStart >= WORKGROUP_SIZE_FORCE)) {
			// Get the new interval start
			intStart = ind & ~(WORKGROUP_SIZE_FORCE - 1);

			// Load the interval's info
			sharedCounts[gl_LocalInvocationID.x] = counts[intStart + gl_LocalInvocationID.x];
			sharedRadiuses[gl_LocalInvocationID.x] = radiuses[intStart + gl_LocalInvocationID.x];
			sharedPos[gl_LocalInvocationID.x] = nodePos[intStart + gl_LocalInvocationID.x];
			sharedMass[gl_LocalInvocationID.x] = nodeMass[intStart + gl_LocalInvocationID.x];

			subgroupBarrier();
			subgroupMemoryBarrierShared();
		}

		// Check if the current particle is far enough
		vec2 distVec = sharedPos[ind - intStart] - pos;
		float dist = dot(distVec, distVec) + SOFTENING_LEN_SQR;

		if(subgroupAll(sharedRadiuses[ind - intStart] <= dist * ACCURACY_PARAMETER_SQR)) {
			// Apply the force and move on to the next node
			dist = inversesqrt(dist);
			accel += distVec * (sharedMass[ind - intStart] * dist * dist * dist);

			ind += sharedCounts[ind - intStart];
		} else {
			// Move on the the first child node
			++ind;
		}
	}

	// Calculate the new position and velocity
	vec2 newVel = vel + accel * (GRAVITATIONAL_CONST * SIMULATION_TIME);
	vec2 newPos = pos + (vel + newVel) * (0.5 * SIMULATION_TIME);

	// Write the particle's new info
	particlesPosOut[srcIndex] = newPos;
	particlesVelOut[srcIndex] = newVel;
}