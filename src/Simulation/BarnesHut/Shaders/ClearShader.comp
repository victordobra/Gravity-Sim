#version 440

// Constants
layout(constant_id = 0) const uint WORKGROUP_SIZE_BOX = 128;
layout(constant_id = 1) const uint WORKGROUP_SIZE_TREE = 8;
layout(constant_id = 2) const uint WORKGROUP_SIZE_FORCE = 32;

layout(constant_id = 3) const float SIMULATION_TIME = 0.001;
layout(constant_id = 4) const float GRAVITATIONAL_CONST = 1;
layout(constant_id = 5) const float SOFTENING_LEN_SQR = 0.01;
layout(constant_id = 6) const float ACCURACY_PARAMETER_SQR = 1.0;

layout(constant_id = 7) const int PARTICLE_COUNT = 0;
layout(constant_id = 8) const int BUFFER_SIZE = 0;

// Particle buffers
layout(set = 0, binding = 0) coherent buffer ParticlesPosInBuffer {
	vec2 particlesPosIn[];
};
layout(set = 0, binding = 1) coherent buffer ParticlesVelInBuffer {
	vec2 particlesVelIn[];
};
layout(set = 0, binding = 2) coherent buffer ParticlesMassInBuffer {
	float particlesMassIn[];
};

layout(set = 1, binding = 0) coherent buffer ParticlesPosOutBuffer {
	vec2 particlesPosOut[];
};
layout(set = 1, binding = 1) coherent buffer ParticlesVelOutBuffer {
	vec2 particlesVelOut[];
};
layout(set = 1, binding = 2) coherent buffer ParticlesMassOutBuffer {
	float particlesMassOut[];
};

// Simulation buffers
layout(set = 2, binding = 0) coherent buffer StateBuffer {
	vec4 box;
	vec4 boxes[WORKGROUP_SIZE_BOX];
} state;
layout(set = 2, binding = 1) coherent buffer CountBuffer {
	uint counts[];
};
layout(set = 2, binding = 2) coherent buffer RadiusBuffer {
	float radiuses[];
};
layout(set = 2, binding = 3) coherent buffer SrcBuffer {
	uint sortedSrc[];
};
layout(set = 2, binding = 4, r32ui) coherent uniform uimage2D treeCount[11];
layout(set = 2, binding = 5, rg32ui) coherent uniform uimage2D treeStart[11];
layout(set = 2, binding = 6, rg32f) coherent uniform image2D treePos[11];
layout(set = 2, binding = 7, r32f) coherent uniform image2D treeMass[11];

layout(local_size_x_id = 1, local_size_y_id = 1, local_size_z = 1) in;

void main() {
    // Reset all image values
    ivec2 ind = ivec2(gl_GlobalInvocationID.xy);

    imageStore(treeCount[0], ind, uvec4(0));
    imageStore(treeStart[0], ind, uvec4(0));
    imageStore(treePos[0], ind, vec4(0));
    imageStore(treeMass[0], ind, vec4(0));
}
