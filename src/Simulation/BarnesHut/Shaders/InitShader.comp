#version 440

#extension GL_EXT_shader_atomic_float : require

// Constants
layout(constant_id = 0) const uint WORKGROUP_SIZE_PARTICLE = 128;
layout(constant_id = 1) const uint WORKGROUP_SIZE_TREE = 64;
layout(constant_id = 2) const uint WORKGROUP_SIZE_FORCE = 32;

layout(constant_id = 3) const float SIMULATION_TIME = 0.001;
layout(constant_id = 4) const float GRAVITATIONAL_CONST = 1;
layout(constant_id = 5) const float SOFTENING_LEN_SQR = 0.01;
layout(constant_id = 6) const float ACCURACY_PARAMETER_SQR = 1.0;
layout(constant_id = 7) const float SIMULATION_SIZE = 500.0;

layout(constant_id = 8) const uint PARTICLE_COUNT = 0;
layout(constant_id = 9) const uint TREE_SIZE = 0;

const uint STRIDE = WORKGROUP_SIZE_PARTICLE * WORKGROUP_SIZE_PARTICLE;

// Particle buffers
layout(set = 0, binding = 0) coherent buffer ParticlesPosInBuffer {
	vec2 particlesPosIn[];
};
layout(set = 0, binding = 1) coherent buffer ParticlesVelInBuffer {
	vec2 particlesVelIn[];
};
layout(set = 0, binding = 2) coherent buffer ParticlesMassInBuffer {
	float particlesMassIn[];
};

layout(set = 1, binding = 0) coherent buffer ParticlesPosOutBuffer {
	vec2 particlesPosOut[];
};
layout(set = 1, binding = 1) coherent buffer ParticlesVelOutBuffer {
	vec2 particlesVelOut[];
};
layout(set = 1, binding = 2) coherent buffer ParticlesMassOutBuffer {
	float particlesMassOut[];
};

// Simulation buffers
layout(set = 2, binding = 0) coherent buffer CountBuffer {
	uint counts[];
};
layout(set = 2, binding = 1) coherent buffer RadiusBuffer {
	float radiuses[];
};
layout(set = 2, binding = 2) coherent buffer NodePosBuffer {
    vec2 nodePos[];
};
layout(set = 2, binding = 3) coherent buffer NodeMassBuffer {
    float nodeMass[];
};
layout(set = 2, binding = 4) coherent buffer SrcBuffer {
	uint sortedSrc[];
};
layout(set = 2, binding = 5) coherent buffer TreeCountBuffer {
	uvec2 counts[];
} treeCounts[11];
layout(set = 2, binding = 6) coherent buffer TreeStartBuffer {
	uvec2 starts[];
} treeStarts[11];
layout(set = 2, binding = 7) coherent buffer TreePosBuffer {
	vec2 pos[];
} treePos[11];
layout(set = 2, binding = 8) coherent buffer TreeMassBuffer {
	float mass[];
} treeMass[11];

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

void main() {
	for(uint i = gl_GlobalInvocationID.x; i < PARTICLE_COUNT; i += STRIDE) {
		// Load the current particle's position and mass
		vec2 pos = particlesPosIn[i];
		float mass = particlesMassIn[i];

		// Get the current particle's quadrant
		vec2 relPos = (pos / SIMULATION_SIZE + vec2(1)) * 0.5;
		relPos *= TREE_SIZE;
		
		if(relPos.x >= 0 && relPos.x < TREE_SIZE && relPos.y >= 0 && relPos.y < TREE_SIZE) {
			uint indX = uint(relPos.x);
			uint indY = uint(relPos.y);

			// Get the particle's coordinate in the buffer
			indX = (indX | (indX << 8)) & 0x00ff00ff;
			indX = (indX | (indX << 4)) & 0x0f0f0f0f;
			indX = (indX | (indX << 2)) & 0x33333333;
			indX = (indX | (indX << 1)) & 0x55555555;

			indY = (indY | (indY << 8)) & 0x00ff00ff;
			indY = (indY | (indY << 4)) & 0x0f0f0f0f;
			indY = (indY | (indY << 2)) & 0x33333333;
			indY = (indY | (indY << 1)) & 0x55555555;

			uint ind = indX | (indY << 1);

			// Update the position for the center of mass
			pos *= mass;

			// Update the node's info
			atomicAdd(treeCounts[10].counts[ind][0], 1);
			atomicCompSwap(treeCounts[10].counts[ind][1], 1, 2); // Create a new node if one particle is already present
			atomicAdd(treeCounts[10].counts[ind][1], 1);
			atomicAdd(treePos[10].pos[ind][0], pos.x);
			atomicAdd(treePos[10].pos[ind][1], pos.y);
			atomicAdd(treeMass[10].mass[ind], mass);
		} else {
			// Update the particle's mass
			particlesMassIn[i] = 0;
		}
	}
}