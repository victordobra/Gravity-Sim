#version 440

// Constants
layout(constant_id = 0) const uint WORKGROUP_SIZE_PARTICLE = 128;
layout(constant_id = 1) const uint WORKGROUP_SIZE_TREE = 64;
layout(constant_id = 2) const uint WORKGROUP_SIZE_FORCE = 32;

layout(constant_id = 3) const float SIMULATION_TIME = 0.001;
layout(constant_id = 4) const float GRAVITATIONAL_CONST = 1;
layout(constant_id = 5) const float SOFTENING_LEN_SQR = 0.01;
layout(constant_id = 6) const float ACCURACY_PARAMETER_SQR = 1.0;
layout(constant_id = 7) const float SIMULATION_SIZE = 500.0;

layout(constant_id = 8) const uint PARTICLE_COUNT = 0;
layout(constant_id = 9) const uint TREE_SIZE = 0;

// Simulation buffers
layout(set = 0, binding = 0) coherent buffer CountBuffer {
	uint counts[];
};
layout(set = 0, binding = 1) coherent buffer RadiusBuffer {
	float radiuses[];
};
layout(set = 0, binding = 2) coherent buffer NodePosBuffer {
	vec2 nodePos[];
};
layout(set = 0, binding = 3) coherent buffer NodeMassBuffer {
	float nodeMass[];
};
layout(set = 0, binding = 4) coherent buffer SrcBuffer {
	uint sortedSrc[];
};
layout(set = 0, binding = 5) coherent buffer TreeCountBuffer {
	uvec2 counts[];
} treeCounts[11];
layout(set = 0, binding = 6) coherent buffer TreeStartBuffer {
	uvec2 starts[];
} treeStarts[11];
layout(set = 0, binding = 7) coherent buffer TreePosBuffer {
	vec2 pos[];
} treePos[11];
layout(set = 0, binding = 8) coherent buffer TreeMassBuffer {
	float mass[];
} treeMass[11];

layout(local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

// Push constants
layout(push_constant) uniform PushConstants {
	uint depth;
} push;

void main() {
	// Check if the implementation»õs index is in the given interval
	uint treeSize = 1 << (push.depth << 1);
	if(gl_GlobalInvocationID.x < treeSize) {
		// Load the node's info
		uvec2 count = treeCounts[push.depth].counts[gl_GlobalInvocationID.x];
		uvec2 start = treeStarts[push.depth].starts[gl_GlobalInvocationID.x];
		vec2 pos = treePos[push.depth].pos[gl_GlobalInvocationID.x];
		float mass = treeMass[push.depth].mass[gl_GlobalInvocationID.x];

		// Check if the current node exists
		if(count.y > 1) {
			// Update the center's position
			if(mass != 0)
				pos /= mass;

			// Calculate the radius
			float radius = SIMULATION_SIZE * SIMULATION_SIZE * 2;
			radius /= 1 << (push.depth << 1);

			// Write the node's info
			counts[start.y] = count.y;
			radiuses[start.y] = radius;
			nodePos[start.y] = pos;
			nodeMass[start.y] = mass;

			// Update the node start, if required
			if(push.depth == 10)
				treeStarts[push.depth].starts[gl_GlobalInvocationID.x] += uvec2(0, 1);
		}
	}
}