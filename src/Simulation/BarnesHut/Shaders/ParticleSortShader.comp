#version 440

// Constants
layout(constant_id = 0) const uint WORKGROUP_SIZE_BOX = 128;
layout(constant_id = 1) const uint WORKGROUP_SIZE_TREE = 64;
layout(constant_id = 2) const uint WORKGROUP_SIZE_FORCE = 32;

layout(constant_id = 3) const float SIMULATION_TIME = 0.001;
layout(constant_id = 4) const float GRAVITATIONAL_CONST = 1;
layout(constant_id = 5) const float SOFTENING_LEN_SQR = 0.01;
layout(constant_id = 6) const float ACCURACY_PARAMETER_SQR = 1.0;

layout(constant_id = 7) const uint PARTICLE_COUNT = 0;
layout(constant_id = 8) const uint TREE_SIZE = 0;

const uint STRIDE = WORKGROUP_SIZE_BOX * WORKGROUP_SIZE_BOX;

// Particle buffers
layout(set = 0, binding = 0) coherent buffer ParticlesPosInBuffer {
	vec2 particlesPosIn[];
};
layout(set = 0, binding = 1) coherent buffer ParticlesVelInBuffer {
	vec2 particlesVelIn[];
};
layout(set = 0, binding = 2) coherent buffer ParticlesMassInBuffer {
	float particlesMassIn[];
};

layout(set = 1, binding = 0) coherent buffer ParticlesPosOutBuffer {
	vec2 particlesPosOut[];
};
layout(set = 1, binding = 1) coherent buffer ParticlesVelOutBuffer {
	vec2 particlesVelOut[];
};
layout(set = 1, binding = 2) coherent buffer ParticlesMassOutBuffer {
	float particlesMassOut[];
};

// Simulation buffers
layout(set = 2, binding = 0) coherent buffer StateBuffer {
	vec4 box;
	vec4 boxes[WORKGROUP_SIZE_BOX];
} state;
layout(set = 2, binding = 1) coherent buffer CountBuffer {
	uint counts[];
};
layout(set = 2, binding = 2) coherent buffer RadiusBuffer {
	float radiuses[];
};
layout(set = 2, binding = 3) coherent buffer NodePosBuffer {
	vec2 nodePos[];
};
layout(set = 2, binding = 4) coherent buffer NodeMassBuffer {
	float nodeMass[];
};
layout(set = 2, binding = 5) coherent buffer SrcBuffer {
	uint sortedSrc[];
};
layout(set = 2, binding = 6) coherent buffer TreeCountBuffer {
	uvec2 counts[];
} treeCounts[10];
layout(set = 2, binding = 7) coherent buffer TreeStartBuffer {
	uvec2 starts[];
} treeStarts[10];
layout(set = 2, binding = 8) coherent buffer TreePosBuffer {
	vec2 pos[];
} treePos[10];
layout(set = 2, binding = 9) coherent buffer TreeMassBuffer {
	float mass[];
} treeMass[10];

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

void main() {
	// Load the simulation box
	vec4 box = state.box;

	for(uint i = gl_GlobalInvocationID.x; i < PARTICLE_COUNT; i += STRIDE) {
		// Load the current particle's position and mass
		vec2 pos = particlesPosIn[i];
		float mass = particlesMassIn[i];

		// Get the current particle's quadrant
		vec2 relPos = pos - box.xy;
		relPos *= vec2(TREE_SIZE) / (box.zw - box.xy);
		
		uint indX = uint(relPos.x);
		uint indY = uint(relPos.y);

		// Get the particle's coordinate in the buffer
		indX = (indX | (indX << 8)) & 0x00ff00ff;
		indX = (indX | (indX << 4)) & 0x0f0f0f0f;
		indX = (indX | (indX << 2)) & 0x33333333;
		indX = (indX | (indX << 1)) & 0x55555555;

		indY = (indY | (indY << 8)) & 0x00ff00ff;
		indY = (indY | (indY << 4)) & 0x0f0f0f0f;
		indY = (indY | (indY << 2)) & 0x33333333;
		indY = (indY | (indY << 1)) & 0x55555555;

		uint ind = indX | (indY << 1);

		// Write the source index
		uint dstInd = atomicAdd(treeStarts[9].starts[ind].x, 1);
		sortedSrc[dstInd] = i;

		// Write the particle's info to the sorted tree
		dstInd = atomicAdd(treeStarts[9].starts[ind].y, 1);
		counts[dstInd] = 1;
		radiuses[dstInd] = 0;
		nodePos[dstInd] = pos;
		nodeMass[dstInd] = mass;
	}
}