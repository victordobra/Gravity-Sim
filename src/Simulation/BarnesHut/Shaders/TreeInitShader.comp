#version 440

// Constants
layout(constant_id = 0) const uint WORKGROUP_SIZE_BOX = 128;
layout(constant_id = 1) const uint WORKGROUP_SIZE_TREE = 64;
layout(constant_id = 2) const uint WORKGROUP_SIZE_FORCE = 32;

layout(constant_id = 3) const float SIMULATION_TIME = 0.001;
layout(constant_id = 4) const float GRAVITATIONAL_CONST = 1;
layout(constant_id = 5) const float SOFTENING_LEN_SQR = 0.01;
layout(constant_id = 6) const float ACCURACY_PARAMETER_SQR = 1.0;

layout(constant_id = 7) const uint PARTICLE_COUNT = 0;
layout(constant_id = 8) const uint TREE_SIZE = 0;

// Simulation buffers
layout(set = 0, binding = 0) coherent buffer StateBuffer {
	vec4 box;
	vec4 boxes[WORKGROUP_SIZE_BOX];
} state;
layout(set = 0, binding = 1) coherent buffer CountBuffer {
	uint counts[];
};
layout(set = 0, binding = 2) coherent buffer RadiusBuffer {
	float radiuses[];
};
layout(set = 0, binding = 3) coherent buffer SrcBuffer {
	uint sortedSrc[];
};
layout(set = 0, binding = 4) coherent buffer TreeCountBuffer {
	uvec2 counts[];
} treeCounts[10];
layout(set = 0, binding = 5) coherent buffer TreeStartBuffer {
	uvec2 starts[];
} treeStarts[10];
layout(set = 0, binding = 6) coherent buffer TreePosBuffer {
	vec2 pos[];
} treePos[10];
layout(set = 0, binding = 7) coherent buffer TreeMassBuffer {
	float mass[];
} treeMass[10];

layout(local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

// Push constants
layout(push_constant) uniform PushConstants {
    uint depth;
} push;

// Shared matrix
shared uvec2 sharedCounts[WORKGROUP_SIZE_TREE << 2];
shared vec2 sharedPos[WORKGROUP_SIZE_TREE << 2];
shared float sharedMass[WORKGROUP_SIZE_TREE << 2];

void main() {
	// Check if the implementationÈ›s index is in the given interval
	uint treeSize = 1 << (push.depth << 1);
	if(gl_GlobalInvocationID.x < treeSize) {
		// Load the corresponding subregion's nodes
		uint stride = min(WORKGROUP_SIZE_TREE, treeSize);
		uint childStart = (gl_WorkGroupID.x * WORKGROUP_SIZE_TREE) << 2;

		for(uint inc = 0; inc != (stride << 2); inc += stride) {
			sharedCounts[gl_LocalInvocationID.x + inc] = treeCounts[push.depth + 1].counts[childStart + gl_LocalInvocationID.x + inc];
			sharedPos[gl_LocalInvocationID.x + inc] = treePos[push.depth + 1].pos[childStart + gl_LocalInvocationID.x + inc];
			sharedMass[gl_LocalInvocationID.x + inc] = treeMass[push.depth + 1].mass[childStart + gl_LocalInvocationID.x + inc];
		}

		barrier();
		memoryBarrierShared();
		
		// Apply the reduction to the loaded particle infos
		uint childInd = gl_LocalInvocationID.x << 2;
		
		uvec2 newCounts = sharedCounts[childInd] + sharedCounts[childInd + 1] + sharedCounts[childInd + 2] + sharedCounts[childInd + 3];
		vec2 newPos = sharedPos[childInd] + sharedPos[childInd + 1] + sharedPos[childInd + 2] + sharedPos[childInd + 3];
		float newMass = sharedMass[childInd] + sharedMass[childInd + 1] + sharedMass[childInd + 2] + sharedMass[childInd + 3];

		// Create a new node, if required
		newCounts += uvec2(0, uint(newCounts.y > 1));

		// Write the new infos
		treeCounts[push.depth].counts[gl_GlobalInvocationID.x] = newCounts;
		treePos[push.depth].pos[gl_GlobalInvocationID.x] = newPos;
		treeMass[push.depth].mass[gl_GlobalInvocationID.x] = newMass;
	}
}