#version 440

// Constants
layout(constant_id = 0) const uint WORKGROUP_SIZE_TREE = 128;
layout(constant_id = 1) const uint WORKGROUP_COUNT_TREE = 128;
layout(constant_id = 2) const uint WORKGROUP_SIZE_FORCE = 64;

layout(constant_id = 3) const float SIMULATION_TIME = 0.001;
layout(constant_id = 4) const float GRAVITATIONAL_CONST = 1;
layout(constant_id = 5) const float SOFTENING_LEN_SQR = 0.01;

layout(constant_id = 6) const int PARTICLE_COUNT = 0;
layout(constant_id = 7) const int BUFFER_SIZE = 0;

const uint STRIDE = WORKGROUP_SIZE_TREE * WORKGROUP_COUNT_TREE;

// Particle buffers
layout(set = 0, binding = 0) coherent buffer ParticlesPosInBuffer {
	vec2 particlesPosIn[];
};
layout(set = 0, binding = 1) coherent buffer ParticlesVelInBuffer {
	vec2 particlesVelIn[];
};
layout(set = 0, binding = 2) coherent buffer ParticlesMassInBuffer {
	float particlesMassIn[];
};

layout(set = 1, binding = 0) coherent buffer ParticlesPosOutBuffer {
	vec2 particlesPosOut[];
};
layout(set = 1, binding = 1) coherent buffer ParticlesVelOutBuffer {
	vec2 particlesVelOut[];
};
layout(set = 1, binding = 2) coherent buffer ParticlesMassOutBuffer {
	float particlesMassOut[];
};

// Simulation buffers
layout(set = 2, binding = 0) coherent buffer StateBuffer {
	vec4 box;
	vec4 boxes[WORKGROUP_COUNT_TREE];

	int semaphore;
	int treeTop;
} state;
layout(set = 2, binding = 1) coherent buffer TreeBuffer {
	ivec4 tree[];
};
layout(set = 2, binding = 2) coherent buffer BoxBuffer {
	vec4 boxes[];
};
layout(set = 2, binding = 3) coherent buffer IntBuffer {
	ivec2 ints[];
};

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

void main() {
	// Get the particle's starting index
	int nodeInd = BUFFER_SIZE - 1 - int(gl_GlobalInvocationID.x);
	int end = state.treeTop;

	while(nodeInd > end) {
		// Check if the interval start is now valid
		int start = ints[nodeInd][0];

		if(start != -1) {
			// Loop through the particle's children
			ivec4 children = tree[nodeInd];

			for(int i = 0; i != 4; ++i) {
				// Skip the current index if invalid
				if(children[i] == -1)
					continue;
				
				// Set the child's start and update the start for the next child
				ints[children[i]][0] = start;
				start += ints[children[i]][1];
			}

			// Update the node index
			nodeInd -= int(STRIDE);
		}
	}
}
